Let x1, x2, x3 be the three positive integers roots. The polynomial must be
p(x) = (x-x1)*(x-x2)*(x-x3).
Comparing the coefficient
300 = x1 + x2 + x3.

WOLOG we assume 1 <= x1 <= x2 <= x3, and immediately we see
1 <= x1 <= 100
x1 <= x2 <= floor((300 - x1)/2)
x2 <= x3 <= 298.

We also know that the robo-cat will stay intact only when dropped from
n < x1 or x2 < n < x3.
Since we need minimal numbers of breaks and of experiments, we start searching within the above ranges.

We first search for x1 starting from 1, upper bounded by 100. This gives x2 + x3 = 300 - x1.
We then search for x2 starting from floor((300 - x1)/2), lowered bounded by x1. It follows x3 = 300 - x1 - x2.

Without prior knowledge of which search region is larger, we use the same algorithm for the two searches:
1. Start with a number to do the experiment and search up/down.
2. Keep searching with the experiment number differing from the initial number by
   d = 0, 1, 3, 7, 15, ... 2**k-1,
   until the robo-cat breaks, or until the next number is out of the bound.
3. If the robo-cat breaks at d = 0, we've found the number.
4. If the robo-cat breaks at d = 2**k-1, we know the number we want is between d = 2**(k-1) and d = 2**k-1 inclusive.
   Thus we go back to step 1 starting with a number d = 2**(k-1) and bound d = 2**k-1.
5. If the next number d = 2**(k+1) is out of the bound, we know the number is between d = 2**k and the bound.
   Thus we go back to step 1 starting with a number d = 2**k and the same bound.

Analyze the algorithm:
Let lg be the base-2 logarithm and consider the algorithm applied to the search for x1.
We also consider the worst case where Step 2 takes k experiments and Step 4 breaks 1 robo-cat.
The first time Step 2 is encountered, floor(lg(x1))+1 experiments are done.
The second time Step 2 is encountered, at most 